name: CI/CD - Deploy no AKS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      # Autenticação no DockerHub
      - name: Login no DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Build e push das imagens (ajuste os serviços conforme necessário)
      - name: Build e Push das imagens
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tech-api:latest -f ./src/TechChallenge.API/Dockerfile .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tech-api:latest

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tech-worker:latest -f ./src/TechChallenge.Worker/Dockerfile .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tech-worker:latest

      # Configurar o kubeconfig
      - name: Criar kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      # Aplicar arquivos de deployment no cluster
      - name: Deploy no Kubernetes
        run: |
          kubectl apply -f k8s/api-deployment.yaml
          kubectl apply -f k8s/api-service.yaml
          kubectl apply -f k8s/worker-deployment.yaml
          kubectl apply -f k8s/worker-service.yaml
          kubectl apply -f k8s/prometheus-deployment.yaml
          kubectl apply -f k8s/prometheus-service.yaml
          kubectl apply -f k8s/grafana-deployment.yaml
          kubectl apply -f k8s/grafana-service.yaml
          kubectl apply -f k8s/mssql-server-deployment.yaml
          kubectl apply -f k8s/mssql-server-service.yaml
          kubectl apply -f k8s/rabbit-mq-deployment.yaml
          kubectl apply -f k8s/rabbitmq-service.yaml

      # Verificação do status
      - name: Verificar status dos pods e serviços
        run: |
          kubectl get pods -o wide
          kubectl get svc -o wide
